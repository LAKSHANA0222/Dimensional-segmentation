import SimpleITK as sitk
import numpy as np
import matplotlib.pyplot as plt
from skimage.filters import threshold_otsu
import os


def load_image(path):
    """Load image using SimpleITK."""
    image = sitk.ReadImage(path)
    array = sitk.GetArrayFromImage(image)  # z, y, x
    return array, image


def segment_2d(image_2d):
    """Perform simple Otsu thresholding for 2D segmentation."""
    threshold = threshold_otsu(image_2d)
    segmented = image_2d > threshold
    return segmented


def segment_3d(volume_3d):
    """Apply 2D segmentation slice by slice on a 3D volume."""
    segmented_volume = np.zeros_like(volume_3d)
    for i in range(volume_3d.shape[0]):
        segmented_volume[i] = segment_2d(volume_3d[i])
    return segmented_volume


def save_segmented_image(segmented_array, reference_image, output_path):
    """Save the segmented binary image using the reference image's metadata."""
    seg_image = sitk.GetImageFromArray(segmented_array.astype(np.uint8))
    seg_image.CopyInformation(reference_image)
    sitk.WriteImage(seg_image, output_path)
    print(f"Segmented image saved to: {output_path}")


def visualize_2d_segmentation(original, segmented):
    """Display original and segmented 2D image."""
    fig, axes = plt.subplots(1, 2)
    axes[0].imshow(original, cmap='gray')
    axes[0].set_title("Original 2D Slice")
    axes[1].imshow(segmented, cmap='gray')
    axes[1].set_title("Segmented Slice")
    plt.show()


def main():
    # Update this path to your DICOM/NIfTI image path
    image_path = "sample_image.nii.gz"  # Replace with your 2D/3D medical image path
    output_path = "segmented_output.nii.gz"

    image_array, reference_image = load_image(image_path)

    if image_array.ndim == 2:
        print("Processing 2D image...")
        segmented = segment_2d(image_array)
        visualize_2d_segmentation(image_array, segmented)
        save_segmented_image(segmented, reference_image, output_path)

    elif image_array.ndim == 3:
        print("Processing 3D volume...")
        segmented = segment_3d(image_array)
        # Visualize a mid-slice
        mid_slice = image_array.shape[0] // 2
        visualize_2d_segmentation(image_array[mid_slice], segmented[mid_slice])
        save_segmented_image(segmented, reference_image, output_path)

    else:
        print("Unsupported image dimensions.")


if __name__ == "__main__":
    main()
